<?php

namespace Beepboop\Responder\Invoice;

use Aerys\Request;
use Aerys\Response;
use Beepboop\Action\Group\ListAction as GroupListAction;
use Beepboop\Action\User\ListAction as UserListAction;
use Beepboop\Action\Me\InvoicesAction;
use Beepboop\Action\User\ViewAction;
use Beepboop\Responder;
use Beepboop\Responder\Responds;

class ListResponder implements Responder
{
    use Responds;

    public function run(Request $request, Response $response, array $arguments = [])
    {
        if (await $this->auth($request, $response)) {
            return;
        }

        $parameters = $request->getAllParams();
        $parameters = <$parameters>->merge($arguments);

        if (await $this->errors($parameters, $response)) {
            return;
        }

        $groups = await GroupListAction->new()->run();
        $users = await UserListAction->new()->run();

        $user = await ViewAction->new()->run(<
            "id" => $parameters->customer_id,
        >);

        $invoices = (await InvoicesAction->new()->run(<"user" => $user>))->map(($invoice) => {
            unset($invoice->deleted_at);

            $groups->each(($group) => {
                if ($group->id === $invoice->group_id) {
                  $invoice->group = $group;
                }
            });

            if ($invoice->group !== null) {
                $users->each(($user) => {
                    if ($invoice->group->technician_id === $user->id) {
                      $invoice->group->technician = $user;
                    }

                    if ($invoice->group->administrator_id === $user->id) {
                      $invoice->group->administrator = $user;
                    }
                });
            }

            return $invoice;
        });

        await $this->respond($response, 200, "ok", $invoices);
    }
}
